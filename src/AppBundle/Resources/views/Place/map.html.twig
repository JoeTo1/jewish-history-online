{% extends 'AppBundle:Default:base.html.twig' %}
{% import 'AppBundle:Shared:map-leaflet.html.twig' as map %}

{% block head %}
    {{ map.head() }}
    {{ map.head_markercluster() }}
{% endblock %}

{% block body %}
<div class="row">
    <!--
    <div class="col-sm-3">
        {{ 'Filter Results'|trans }}

        <div class="container-fluid">
            <div class="row box-color-title">
                {{ 'Chronology'|trans|upper }}
            </div>
            <div class="row box-color-title">
                {{ 'Topics'|trans|upper }}
            </div>
            <div class="row box-color-title">
                {{ 'Type of Material'|trans|upper }}
            </div>
        </div>
    </div>-->
    <div class="col-sm-12">
        <div id="map-container">
            <div id="map" style="width: 100%; min-height: 480px"></div>
            <script>
            function escapeHtml(text) {
                return $('<div/>').text(text).html();
            }

            function adjustMapSize() {
                /*
                $('#map').height(function(index, height) {
                    return window.innerHeight - $(this).offset().top;
                });
                */
            }

            $( window ).resize(adjustMapSize);
            adjustMapSize();

            var map = L.map('map');

            map.fitBounds([ [ 47.3024876979, 5.98865807458 ],
                            [ 54.983104153, 15.0169958839 ] ]);

            {{ map.addTileLayer() }}

            var markers = L.markerClusterGroup({
                iconCreateFunction: function (cluster) {
                    // var childCount = cluster.getChildCount();
                    var markers = cluster.getAllChildMarkers();
                    var n = 0;
                    for (var i = 0; i < markers.length; i++) {
                        n += markers[i].number;
                    }
                    var childCount = n;
                    var c = ' marker-cluster-';
                    if (childCount < 10) {
                        c += 'small';
                    } else if (childCount < 100) {
                        c += 'medium';
                    } else {
                        c += 'large';
                    }

                    return new L.DivIcon({ html: '<div><span>' + childCount + '</span></div>', className: 'marker-cluster' + c, iconSize: new L.Point(40, 40) });

    //				return L.divIcon({ html: n, className: 'mycluster', iconSize: L.point(40, 40) });
                },
                // spiderfyOnMaxZoom: false, showCoverageOnHover: false, zoomToBoundsOnClick: false,
                disableClusteringAtZoom: 17
            });

            var labelLoading = "{{ 'Loading...'|trans }}";
            var markerPos = {{ markers|json_encode|raw }};
            for (var geo in markerPos) {
                if (markerPos.hasOwnProperty(geo)) {
                    (function(info) {
                        // anonymous function to create a closure
                        var markerGeo = geo;
                        var loaded = false;
                        var marker = L.marker(info['latLng'],
                                              { title: info['name'] });
                        marker.number = info['number'];
                        marker.bindPopup(labelLoading, { maxHeight: 160 });
                        marker.on('click', function(e) {
                            var popup = e.target.getPopup();
                            if (!loaded) {
                                loaded = true;
                                var header = '<b>' + escapeHtml(info['name']) + '</b><br />';
                                popup.setContent(header
                                                 + labelLoading);
                                popup.update();
                                var urlTemplace = '{{ path('place-map-popup-content', { 'ids' : '{0}', 'geo' : '{1}' }) }}';
                                var url = decodeURIComponent(urlTemplace).replace('{0}', info['places']).replace('{1}', markerGeo);
                                console.log('loading...' + url);
                                $.get(url).done(function(data) {
                                    popup.setContent(header + data);
                                    popup.update();
                                });
                            }
                        });

                        markers.addLayer(marker);
                    })(markerPos[geo]);
                }
            }

            map.addLayer(markers);
            </script>
        </div>
    </div>
</div>
{% endblock %}